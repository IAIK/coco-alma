/* Generated by Yosys 0.9+4306 (git sha1 3931b3a0, gcc 9.3.0-17ubuntu1~20.04 -fPIC -Os) */

(* hdlname = "\\dom_and" *)
(* dynports =  1  *)
(* top =  1  *)
(* src = "dom_and.v:1.1-65.10" *)
module dom_and(ClkCI, RstRI, LeftDI, RightDI, RandomDI, OutDO);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  (* src = "dom_and.v:39.38-39.46" *)
  wire [15:0] BlindedD;
  (* src = "dom_and.v:43.38-43.48" *)
  wire [15:0] BufferedDN;
  (* src = "dom_and.v:44.38-44.48" *)
  reg [15:0] BufferedDP;
  (* src = "dom_and.v:5.11-5.16" *)
  input ClkCI;
  (* src = "dom_and.v:15.38-15.44" *)
  (* unused_bits = "1 2 3 4 6 7 8 9 11 12 13 14" *)
  wire [15:0] CrossD;
  (* src = "dom_and.v:7.28-7.34" *)
  input [3:0] LeftDI;
  (* src = "dom_and.v:11.29-11.34" *)
  output [3:0] OutDO;
  (* src = "dom_and.v:9.28-9.36" *)
  input [5:0] RandomDI;
  wire [14:0] RandomMapD;
  (* src = "dom_and.v:8.28-8.35" *)
  input [3:0] RightDI;
  (* src = "dom_and.v:6.11-6.16" *)
  input RstRI;
  assign _00_ = ~(BufferedDP[1] ^ BufferedDP[0]);
  assign _01_ = ~(BufferedDP[3] ^ BufferedDP[2]);
  assign OutDO[0] = _01_ ^ _00_;
  assign _02_ = ~(BufferedDP[5] ^ BufferedDP[4]);
  assign _03_ = ~(BufferedDP[7] ^ BufferedDP[6]);
  assign OutDO[1] = _03_ ^ _02_;
  assign _04_ = ~(BufferedDP[9] ^ BufferedDP[8]);
  assign _05_ = ~(BufferedDP[11] ^ BufferedDP[10]);
  assign OutDO[2] = _05_ ^ _04_;
  assign _06_ = ~(BufferedDP[13] ^ BufferedDP[12]);
  assign _07_ = ~(BufferedDP[15] ^ BufferedDP[14]);
  assign OutDO[3] = _07_ ^ _06_;
  assign BlindedD[0] = RightDI[0] & LeftDI[0];
  assign BlindedD[5] = LeftDI[1] & RightDI[1];
  assign BlindedD[10] = LeftDI[2] & RightDI[2];
  assign BlindedD[15] = LeftDI[3] & RightDI[3];
  assign _08_ = RightDI[1] & LeftDI[0];
  assign BlindedD[1] = _08_ ^ RandomDI[0];
  assign _09_ = RightDI[2] & LeftDI[0];
  assign BlindedD[2] = _09_ ^ RandomDI[1];
  assign _10_ = RightDI[3] & LeftDI[0];
  assign BlindedD[3] = _10_ ^ RandomDI[3];
  assign _11_ = LeftDI[1] & RightDI[0];
  assign BlindedD[4] = _11_ ^ RandomDI[0];
  assign _12_ = LeftDI[1] & RightDI[2];
  assign BlindedD[6] = _12_ ^ RandomDI[2];
  assign _13_ = LeftDI[1] & RightDI[3];
  assign BlindedD[7] = _13_ ^ RandomDI[4];
  assign _14_ = LeftDI[2] & RightDI[0];
  assign BlindedD[8] = _14_ ^ RandomDI[1];
  assign _15_ = LeftDI[2] & RightDI[1];
  assign BlindedD[9] = _15_ ^ RandomDI[2];
  assign _16_ = LeftDI[2] & RightDI[3];
  assign BlindedD[11] = _16_ ^ RandomDI[5];
  assign _17_ = LeftDI[3] & RightDI[0];
  assign BlindedD[12] = _17_ ^ RandomDI[3];
  assign _18_ = LeftDI[3] & RightDI[1];
  assign BlindedD[13] = _18_ ^ RandomDI[4];
  assign _19_ = LeftDI[3] & RightDI[2];
  assign BlindedD[14] = _19_ ^ RandomDI[5];
  (* src = "dom_and.v:48.5-54.8" *)
  always @(posedge ClkCI, negedge RstRI)
    if (!RstRI) BufferedDP[0] <= 1'h0;
    else BufferedDP[0] <= BlindedD[0];
  (* src = "dom_and.v:48.5-54.8" *)
  always @(posedge ClkCI, negedge RstRI)
    if (!RstRI) BufferedDP[1] <= 1'h0;
    else BufferedDP[1] <= BlindedD[1];
  (* src = "dom_and.v:48.5-54.8" *)
  always @(posedge ClkCI, negedge RstRI)
    if (!RstRI) BufferedDP[2] <= 1'h0;
    else BufferedDP[2] <= BlindedD[2];
  (* src = "dom_and.v:48.5-54.8" *)
  always @(posedge ClkCI, negedge RstRI)
    if (!RstRI) BufferedDP[3] <= 1'h0;
    else BufferedDP[3] <= BlindedD[3];
  (* src = "dom_and.v:48.5-54.8" *)
  always @(posedge ClkCI, negedge RstRI)
    if (!RstRI) BufferedDP[4] <= 1'h0;
    else BufferedDP[4] <= BlindedD[4];
  (* src = "dom_and.v:48.5-54.8" *)
  always @(posedge ClkCI, negedge RstRI)
    if (!RstRI) BufferedDP[5] <= 1'h0;
    else BufferedDP[5] <= BlindedD[5];
  (* src = "dom_and.v:48.5-54.8" *)
  always @(posedge ClkCI, negedge RstRI)
    if (!RstRI) BufferedDP[6] <= 1'h0;
    else BufferedDP[6] <= BlindedD[6];
  (* src = "dom_and.v:48.5-54.8" *)
  always @(posedge ClkCI, negedge RstRI)
    if (!RstRI) BufferedDP[7] <= 1'h0;
    else BufferedDP[7] <= BlindedD[7];
  (* src = "dom_and.v:48.5-54.8" *)
  always @(posedge ClkCI, negedge RstRI)
    if (!RstRI) BufferedDP[8] <= 1'h0;
    else BufferedDP[8] <= BlindedD[8];
  (* src = "dom_and.v:48.5-54.8" *)
  always @(posedge ClkCI, negedge RstRI)
    if (!RstRI) BufferedDP[9] <= 1'h0;
    else BufferedDP[9] <= BlindedD[9];
  (* src = "dom_and.v:48.5-54.8" *)
  always @(posedge ClkCI, negedge RstRI)
    if (!RstRI) BufferedDP[10] <= 1'h0;
    else BufferedDP[10] <= BlindedD[10];
  (* src = "dom_and.v:48.5-54.8" *)
  always @(posedge ClkCI, negedge RstRI)
    if (!RstRI) BufferedDP[11] <= 1'h0;
    else BufferedDP[11] <= BlindedD[11];
  (* src = "dom_and.v:48.5-54.8" *)
  always @(posedge ClkCI, negedge RstRI)
    if (!RstRI) BufferedDP[12] <= 1'h0;
    else BufferedDP[12] <= BlindedD[12];
  (* src = "dom_and.v:48.5-54.8" *)
  always @(posedge ClkCI, negedge RstRI)
    if (!RstRI) BufferedDP[13] <= 1'h0;
    else BufferedDP[13] <= BlindedD[13];
  (* src = "dom_and.v:48.5-54.8" *)
  always @(posedge ClkCI, negedge RstRI)
    if (!RstRI) BufferedDP[14] <= 1'h0;
    else BufferedDP[14] <= BlindedD[14];
  (* src = "dom_and.v:48.5-54.8" *)
  always @(posedge ClkCI, negedge RstRI)
    if (!RstRI) BufferedDP[15] <= 1'h0;
    else BufferedDP[15] <= BlindedD[15];
  assign BufferedDN = BlindedD;
  assign { CrossD[15], CrossD[10], CrossD[5], CrossD[0] } = { BlindedD[15], BlindedD[10], BlindedD[5], BlindedD[0] };
  assign RandomMapD = { RandomDI[5:3], RandomDI[5], 1'h0, RandomDI[2:1], RandomDI[4], RandomDI[2], 1'h0, RandomDI[0], RandomDI[3], RandomDI[1:0], 1'h0 };
endmodule
